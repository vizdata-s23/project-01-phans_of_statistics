---
title: "Visualizing Factors Leading to Success in Eurovision Competitions"
subtitle: "STA/ISS 313 - Project 1"
author: "PHANs of Statistics"
format: html
editor: visual
execute: 
  echo: false
  warning: false
---

```{r setup}

library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggridges)
eurovision <- read.csv("data/eurovision.csv")
```

## Abstract

(1 paragraph): Project abstract.

------------------------------------------------------------------------

## Introduction

Eurovision is an international public song performance competition between European countries every year. Each country submits a song that is to be performed live to a centralized committee that plays the song over a common broadcast, and each country then votes on the other countries' songs. The competition began in 1956, and has occurred every year with the exception of 2020 due to the COVID pandemic. As of 2022, at least 52 countries have participated at least once, with Ireland being the recipient of the most winners. The competition has cemented itself as a periodic staple for each country to present a culturally significant piece on an international stage, and its influence has spread outside of Europe in recent years.

The dataset, contained within eurovision.csv, consists of every song performed in Eurovision history, from 1956 to 2022. This data was collected from the [Eurovision Song Contest website](https://eurovision.tv/), and was found as a [TidyTuesday dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-17/readme.md) on GitHub. The dataset consists of `r nrow(eurovision)` observations and `r ncol(eurovision)` variables, with each observation being a different song entered for the competition. The main variables used in this visual analysis are `year` (year of competition), `host_country` (where the competition was held), `artist_country` (the country the artist represented), `running_order` (the order in which the song was performed), `total_points` (total points earned in the competition), `rank` (rank of the song in the competition), and `winner` (a binary variable indicating whether the song won or didn't win the competition).

## Question 1: Home Country Advantage

### Introduction

Our first question asks if contestants from the `host_country` in each competition tend to perform better than foreign contestants. We were interested in this question because hosting a competition at home is often seen as advantageous, especially in sports such as basketball and soccer where having a supportive crowd boosts team energy (and on the flip side unnerves opponents) and playing in a familiar environment helps players feel comfortable (plus not having to travel). Consequently, we wanted to see if there was a similar pattern for singing competitions like Eurovision, and if there was, to what extent it correlates with performance.

To conduct our analysis, we used the variables `total_points`, `rank`, and `year`. We also created a new binary variable called `from_host_country` for each observation that indicates whether the contestant was competing in their home country (done by matching the `host_country` and `artist_country` variables and returning "true" if a match, and "false" if not).

### Approach

(1-2 paragraphs): Describe what types of plots you are going to make to address your question. For each plot, provide a clear explanation as to why this plot (e.g. boxplot, barplot, histogram, etc.) is best for providing the information you are asking about. The two plots should be of different types, and at least one of the two plots needs to use either color mapping or facets.

We used our first plot as a histogram of `total_points` or final `rank` of host country participants faceted by decade to look at whether home country advantage was more prevalent in certain eras than others. A ridge plot could also be used here, which we will decide upon visualization when we can compare to values of both. Furthermore, we can use `total_points` or `rank` for each contestant as a measure of success and compare the distributions of these metrics between host country participants and non-host country participants in our second plot through a histogram faceted by whether `from_host_country`. A violin plot can also be used here for the second plot to make comparisons better, but we will again decide which to use upon visualization.

### Analysis

(2-3 code blocks, 2 figures, text/code comments as needed): In this section, provide the code that generates your plots. Use scale functions to provide nice axis labels and guides. You are welcome to use theme functions to customize the appearance of your plot, but you are not required to do so. All plots must be made with **ggplot2**. Do not use base R or lattice plotting functions.

```{r q1 data wrangling}

eurovision %>%
  count(year) %>%
  ggplot(aes(x = year, y = n)) +
  geom_bar(stat = "identity") +
  labs(x = "Year",
       y = "Number of participating countries", color = "Decade", 
       title = "More countries have joined Eurovision over time")

# grouped by decade
euro_by_decade <- eurovision |>
  filter(year != "2020") |>
  mutate(decade = case_when(year %in% 1950:1959 ~ "1950s",
                            year %in% 1960:1969 ~ "1960s",
                            year %in% 1970:1979 ~ "1970s",
                            year %in% 1980:1989 ~ "1980s",
                            year %in% 1990:1999 ~ "1990s",
                            year %in% 2000:2009 ~ "2000s",
                            year %in% 2010:2019 ~ "2010s",
                            year %in% 2020:2022 ~ "2020s")) |>
  mutate(from_host_country = case_when(host_country == artist_country ~ "yes",
                                       host_country != artist_country ~ "no"))

# grouped by more arbitrary eras (pre 80s, 80s-90s, 2000s, 2010s-present)
eurovision_eras <- eurovision |>
  filter(year != "2020") |>
  mutate(era = case_when(year %in% 1956:1979 ~ "1956-1979",
                            year %in% 1980:1999 ~ "1980-1999",
                            year %in% 2000:2010 ~ "2000-2010",
                            year %in% 2011:2022 ~ "2011-2022")) |>
  mutate(from_host_country = case_when(host_country == artist_country ~ "yes",
                                       host_country != artist_country ~ "no"))

eurovision_eras |>
  count(era, sort = TRUE)

eurovision_eras |>
  count(from_host_country, rank, sort = TRUE)
```

```{r q1 first plot}
#ggplot(eurovision_eras, aes(x = total_points, y = from_host_country)) +
#  geom_density_ridges()

euro_by_decade %>%
  filter(from_host_country == "yes") %>%
  ggplot(aes(x = rank, y = decade)) +
  geom_density_ridges() +
  labs(x = "Rank",
       y = "Decade", 
       title = "Distribution of home country participants' ranks by decade")
```

```{r q1 second plot}
<<<<<<< HEAD
=======
#| echo: false
# Plot distribution of total points by from_host_country
plot2data <- eurovision
plot2data$from_host_country <- ifelse(plot2data$host_country == plot2data$artist_country, "Yes", "No")
>>>>>>> 5d64fd733898b053bb0ffd20f4b8cb154f5dd85e

ggplot(plot2data, aes(x = total_points, fill = from_host_country)) + 
  geom_histogram(binwidth = 10, alpha = 0.5, position = "identity") +
  labs(title = "Distribution of Total Points by from_host_country", x = "Total Points", y = "Count") +
  facet_wrap(~ from_host_country)

# Plot distribution of rank by from_host_country
ggplot(plot2data, aes(x = rank, fill = from_host_country)) + 
  geom_histogram(binwidth = 5, alpha = 0.5, position = "identity") +
  labs(title = "Distribution of Rank by from_host_country", x = "Rank", y = "Count") +
  facet_wrap(~ from_host_country)

#violin plot
ggplot(plot2data, aes(x = from_host_country, y = total_points, fill = from_host_country)) +
  geom_violin(trim = FALSE, scale = "count", alpha = 0.7) +
  geom_boxplot(width = 0.2, fill = "white", outlier.shape = NA) +
  labs(title = "Distribution of Total Points by from_host_country", x = "from_host_country", y = "Total Points") +
  scale_fill_manual(values = c("#f47b6e", "#6baed6"), name = "From Host Country") +
  theme_minimal() +
  theme(legend.position = "top", axis.title.y = element_text(margin = margin(r = 10))) +
  coord_flip()
```

### Discussion

(1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the plots. Speculate about why the data looks the way it does.

## Question 2: Performance Order and Success

### Introduction

(1-2 paragraphs): Introduction to the question and what parts of the dataset are necessary to answer the question. Also discuss why you're interested in this question.

### Approach

(1-2 paragraphs): Describe what types of plots you are going to make to address your question. For each plot, provide a clear explanation as to why this plot (e.g. boxplot, barplot, histogram, etc.) is best for providing the information you are asking about. The two plots should be of different types, and at least one of the two plots needs to use either color mapping or facets.

### Analysis

(2-3 code blocks, 2 figures, text/code comments as needed): In this section, provide the code that generates your plots. Use scale functions to provide nice axis labels and guides. You are welcome to use theme functions to customize the appearance of your plot, but you are not required to do so. All plots must be made with **ggplot2**. Do not use base R or lattice plotting functions.

```{r q2 data wrangling}

eurovision_text <- eurovision |>
  arrange(desc(total_points)) |>
  slice(1:3)

euro_decades <- eurovision |>
  mutate(decade = case_when(year %in% 1950:1967 ~ "1950-67",
                            year %in% 1968:1986 ~ "1968-85",
                            year %in% 1987:2005 ~ "1986-2003",
                            year %in% 2005:2022 ~ "2004-22")) |>
  drop_na(total_points)

euro_pct <- eurovision |>
  group_by(event) |>
  mutate(total_points_pct = total_points / sum(total_points))
```

```{r q2 first plot}

# set.seed(123)

# ggplot(euro_decades, aes(x = running_order, y = total_points)) +
#   geom_jitter(aes(color = decade), alpha = 0.5) +
#   geom_text(data = eurovision_text, 
#             aes(label = artist), 
#             nudge_x = -2.8, 
#             size = 6) +
#   theme_grey() +
#   theme(panel.border = element_blank(),
#         axis.title = element_text(size = 15), 
#         plot.title = element_text(size = 20), 
#         plot.subtitle = element_text(size = 18)) +
#   geom_smooth(method = lm, size = 2.5, color = "black", se = FALSE, 
#               aes(group = decade)) +
#   geom_smooth(method = "lm", aes(color = decade)) + 
#   labs(x = "Running order", y = "Total points", color = "Decade", 
#        title = "Total points earned by Eurovision contestants by running order", 
#        subtitle = "By decade of competition") +
#   theme_minimal()
```

```{r alternative-q2-first-plot}

euro_decades2 <- euro_decades |>
  group_by(decade, running_order) |>
  mutate(mean_points = mean(total_points))
  
ggplot(euro_decades2, aes(x = running_order, y = mean_points, color = decade)) +
  geom_point() +
  geom_line() +
  geom_smooth(method = "lm")
```

```{r q2 second plot data-wrangling}

euro_places <- eurovision |>
  drop_na(total_points, running_order) |>
  group_by(event) |>
  arrange(desc(total_points), .by_group=TRUE) |>
  mutate(group_row_num = row_number(event)) |>
  mutate(top3 = case_when(
    group_row_num == 1 ~ "First Place",
    group_row_num == 2 ~ "Second Place",
    group_row_num == 3 ~ "Third Place",
    group_row_num > 3 ~ "Other"
  )) |>
  slice(1:3)
```

```{r q2-second-plot}

ggplot(euro_places, aes(x = year, y = running_order)) +
  geom_line() +
  facet_wrap(~ top3, ncol = 1) +
  labs(title = "Running Order of Top Three Finishers In Eurovision Over Time",
       x = "Year", y = "Running Order", color = "Placement") +
  geom_smooth(method = "lm", aes(color = top3)) +
  scale_color_manual(values = c("#DAA520", "#808080", "#967444")) +
  theme_minimal()
```

### Discussion

(1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the plots. Speculate about why the data looks the way it does.

From our first graph, we see that there does not appear to be a strong relationship between the order in which contestants perform and how many points they receive. For each decade, the trend-line is almost horizontal, especially in the earlier decades. While the later decades (especially the 2020s) appear to have a slightly positive relationship between running order and total points earned, the confidence interval is also very wide, suggesting that the relationship may not be as strong as the trend-line suggests.The trend-lines also gradually shift upwards vertically, which makes sense as Eurovision has expanded over the decades, including more participants and more countries with more points available to be earned.

From our second graph, we see consistent results with the first one. For first, second, and third place finishers, we see an almost identical trend-line: a slight positive relationship between year and running order, suggesting that the top three finishers in Eurovision generally performed slightly later in the order than their predecessors from the previous years. Also, there is not a significant difference between the running order of first, second, and third place finishers. However, overall, the lines are so volatile that it suggests that running order is not a very strong factor in performance.

Combining the results from the graph, we conclude that performing later in the running order is correlated slightly with better performance, which could be explained by the fact that people may remember the songs performed towards the end more as they are the most recent in their memory when they vote. The trend that this has more of an impact in recent years could be explained by the fact that Eurovision has expanded over the years, meaning more performers, which would make it harder to remember the earlier performers during voting. Finally, the fact that the running orders of the top three finishers are not too different from each other despite the above results could be explained by the fact that running order matters more for distinguishing the above average from the rest but less for the best of the best.

## References

https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-17/readme.md
