---
title: "Visualizing Factors Leading to Success in Eurovision Competitions"
subtitle: "STA/ISS 313 - Project 1"
author: "PHANs of Statistics"
format: html
editor: visual
execute: 
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggridges)
eurovision <- read_csv("data/eurovision.csv")
```

```{r}
#| label: master data frame
#| include: false

eurovision_filt <- eurovision |>
  filter(year != "2020") |>
  mutate(
    era = case_when(
      year %in% 1956:1979 ~ "1956-1979",
      year %in% 1980:1999 ~ "1980-1999",
      year %in% 2000:2010 ~ "2000-2010",
      year %in% 2011:2022 ~ "2011-2022"
    ) 
  ) |>
  mutate(
    era_binary = case_when(
      year %in% 1956:1999 ~ "Pre-2000",
      year %in% 2000:2022 ~ "Post-2000"
    )
  ) |>
  mutate(
    from_host_country = case_when(
      host_country == artist_country ~ "Yes",
      host_country != artist_country ~ "No"
    )
  ) |>
  mutate(
    decade = case_when(
      year %in% 1950:1959 ~ "1950s",
      year %in% 1960:1969 ~ "1960s",
      year %in% 1970:1979 ~ "1970s",
      year %in% 1980:1989 ~ "1980s",
      year %in% 1990:1999 ~ "1990s",
      year %in% 2000:2009 ~ "2000s",
      year %in% 2010:2022 ~ "2010s-present"
    )
  ) |>
  group_by(year) |>
  mutate(num_ranks = max(rank)) |>
  ungroup() |>
  mutate(rank_pct = 1 - (rank / num_ranks)) |>
  group_by(year) |>
  mutate(num_participants = n()) |>
  ungroup() |>
  group_by(year) |>
  mutate(unweighted_pct_total_points = (total_points / sum(total_points))) |>
  ungroup() |>
  mutate(total_points_pct = (num_participants / 60) * unweighted_pct_total_points) |>
  group_by(year) |>
  mutate(
    running_order_group = case_when(
      running_order / max(running_order) > 2 / 3 ~ "End",
      running_order / max(running_order) > 1 / 3 ~ "Middle",
      running_order / max(running_order) > 0 ~ "Beginning"
    )
  ) |>
  mutate(running_order_group = factor(running_order_group,
                                      levels = c("Beginning", "Middle", "End")))
```

## Abstract

(1 paragraph): Project abstract.

------------------------------------------------------------------------

## Introduction

Eurovision is an international public song performance competition between European countries every year. Each country submits a song that is to be performed live to a centralized committee that plays the song over a common broadcast, and each country then votes on the other countries' songs. The competition began in 1956, and has occurred every year with the exception of 2020 due to the COVID pandemic. As of 2022, at least 52 countries have participated at least once, with Ireland being the recipient of the most winners . The competition has cemented itself as a periodic staple for each country to present a culturally significant piece on an international stage, and its influence has spread outside of Europe in recent years.

The dataset, contained within eurovision.csv, consists of every song performed in Eurovision history, from 1956 to 2022. This data was collected from the [Eurovision Song Contest website](https://eurovision.tv/), and was found as a [TidyTuesday dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-17/readme.md) on GitHub. The dataset consists of `r nrow(eurovision)` observations and `r ncol(eurovision)` variables, with each observation being a different song entered for the competition. The main variables used in this visual analysis are `year` (year of competition), `host_country` (where the competition was held), `artist_country` (the country the artist represented), `running_order` (the order in which the song was performed), `total_points` (total points earned in the competition), `rank` (rank of the song in the competition), and `winner` (a binary variable indicating whether the song won or didn't win the competition).

## Question 1: Home Country Advantage

### Introduction

Our first question asks if contestants from the `host_country` in each competition tend to perform better than foreign contestants. We were interested in this question because hosting a competition at home is often seen as advantageous, especially in sports such as basketball and soccer where having a supportive crowd boosts team energy (and on the flip side unnerves opponents) and playing in a familiar environment helps players feel comfortable (plus not having to travel). Consequently, we wanted to see if there was a similar pattern for singing competitions like Eurovision, and if there was, to what extent it correlates with performance.

To conduct our analysis, we used the variables `total_points`, `rank`, and `year`. We also created a new binary variable called `from_host_country` for each observation that indicates whether the contestant was competing in their home country (done by matching the `host_country` and `artist_country` variables and returning "true" if a match, and "false" if not).

### Approach

We used our first plot as a histogram of `total_points` or final `rank` of host country participants faceted by decade to look at whether home country advantage was more prevalent in certain eras than others. A ridge plot could also be used here, which we will decide upon visualization when we can compare to values of both. Furthermore, we can use `total_points` or `rank` for each contestant as a measure of success and compare the distributions of these metrics between host country participants and non-host country participants in our second plot through a histogram faceted by whether `from_host_country`. A violin plot can also be used here for the second plot to make comparisons better, but we will again decide which to use upon visualization.

### Analysis

```{r}
#| label: q1-data-wrangling
#| echo: false

eurovision |>
  count(year) |>
  ggplot(aes(x = year, y = n)) +
  geom_bar(stat = "identity") +
  labs(x = "Year",
       y = "Number of participating countries",
       title = "More countries have joined Eurovision over time") +
  theme_minimal()

eurovision_filt |>
  group_by(era_binary) |>
  summarise(count = n())

eurovision_filt |>
  count(from_host_country, rank, sort = TRUE)

eurovision_filt |>
  filter(from_host_country == "Yes") |>
  filter(winner == "TRUE")
```

```{r}
#| label: q1-first-plot
#| 
eurovision_filt |>
  filter(from_host_country == "Yes") |>
  ggplot(aes(x = rank_pct, y = era_binary)) +
  geom_density_ridges() +
  labs(x = "Rank percentile",
       y = "Era",
       title = "Distribution of home country participants' rank percentile",
       subtitle = "By era: pre-2000 vs. post-2000") +
  theme_minimal()

eurovision_filt |>
  filter(from_host_country == "Yes") |>
  ggplot(aes(x = rank_pct, y = decade)) +
  geom_density_ridges() +
  labs(x = "Rank percentile",
       y = "Decade",
       title = "Distribution of home country participants' rank percentile by decade") +
  theme_minimal()

#eurovision_filt |>
#  filter(from_host_country == "Yes") |>
#  ggplot(aes(x = rank_pct, fill = era_binary, color = era_binary)) +
#  geom_histogram(position="identity")
```

```{r}
#| label: q1-second-plot

# Plot distribution of total points by from_host_country

# ggplot(eurovision_filt,
#        aes(x = total_points_pct, fill = from_host_country)) +
#   geom_histogram(binwidth = 10,
#                  alpha = 0.5,
#                  position = "identity") +
#   labs(title = "Distribution of total points percentage for host competitors",
#        x = "Total points percentage", y = "Count") +
#   facet_wrap( ~ from_host_country) +
#   theme_minimal()
# 
# # Plot distribution of rank by from_host_country
# ggplot(eurovision_filt, aes(x = rank_pct, fill = from_host_country)) +
#   geom_histogram(binwidth = 5,
#                  alpha = 0.5,
#                  position = "identity") +
#   labs(title = "Distribution of rank percentile for host competitors",
#        x = "Rank percentile", y = "Count") +
#   facet_wrap( ~ from_host_country) +
#   theme_minimal()
# 
# #violin plot
# ggplot(
#   eurovision_filt,
#   aes(x = from_host_country, y = total_points_pct,
#       fill = from_host_country)
# ) +
#   geom_violin(trim = FALSE,
#               scale = "count",
#               alpha = 0.7) +
#   geom_boxplot(width = 0.2,
#                fill = "white",
#                outlier.shape = NA) +
#   labs(title = "Distribution of total points percentage for host competitors",
#        x = "From Host Country?", y = "Total points percentage") +
#   scale_fill_manual(values = c("#f47b6e", "#6baed6"),
#                     name = "From Host Country?") +
#   theme_minimal() +
#   theme(legend.position = "top",
#         axis.title.y = element_text(margin = margin(r = 10))) +
#   coord_flip()
# 
# #the 3 above plots are very skewed bc of more observations in "no" than "yes" for from_home_country; so instead we do:
# 
# ggplot(eurovision_filt,
#        aes(x = total_points_pct, fill = from_host_country)) +
#   geom_density(alpha = 0.5, size = 1.2) +
#   labs(title = "Distribution of total points percentage for host competitors",
#        x = "Total points percentage", y = "Density") +
#   scale_fill_manual(values = c("#f47b6e", "#6baed6"),
#                     name = "From Host Country?") +
#   theme_minimal()

ggplot(eurovision_filt, aes(x = total_points_pct, fill = from_host_country)) +
  geom_density(alpha = 0.5, linewidth = 1.2) +
  labs(title = "Distribution of total points percentage for host competitors",
       x = "Total points percentage", y = "Density") +
  scale_fill_manual(values = c("#f47b6e", "#6baed6"), name = "From Host Country?") +
  theme_minimal()
```

### Discussion

(1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the plots. Speculate about why the data looks the way it does.

## Question 2: Performance Order and Success

### Introduction

Introduction (1-2 paragraphs): Introduction to the question and what parts of the dataset are necessary to answer the question. Also discuss why you're interested in this question.

We are interested in this question because we wanted to see if voters were biased towards certain performances based on their performance order. In these types of competitions, there is always fear of lack of voter consistency due to recency bias or boredom as performances continue throughout the competition. By observing if there are significant trends in how voters vote by performance order, we can gain a better understanding of these biases and how they affect the success of contestants.

### Approach

The first plot we use to answer this question is a group of boxplots comparing the adjusted percentages of points earned described in the first question (`total_points_pct`) by the appearance time of the song, defined as being in the first third ("beginning") , second third ("middle"), or last third ("end") of the performance by running order (`running_order_group`). These boxplots are then faceted by the `era` in which the competition occurred. A boxplot was chosen because it is easy to see inter-group statistics (such as percentiles) better, which makes comparing the general trends of total point percentage evident in the three different appearance groups more plausible. Furthermore, outliers for each of these groups are easily identifiable, and seeing which groups have more extreme outliers is possible with these boxplots. Finally, they are faceted by era because we wanted to observe temporal trends in total points percentage for the three appearance groups.

### Analysis

```{r}
#| label: q2-first-plot

ggplot(
  eurovision_filt,
  aes(x = running_order_group, y = total_points_pct,
      color = running_order_group)
) +
  geom_violin() +
  facet_wrap(~ era_binary, nrow = 1) +
  labs(
    color = "Appearance time",
    y = "Total points percentage",
    x = NULL,
    title = "Percentage of total points earned for contestants by appearance time",
    subtitle = "By era"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        strip.background = element_rect(fill = "grey"))

```

```{r}
#| label: q2-data-wrangling
#| include: false

euro_places <- eurovision_filt |>
  drop_na(total_points_pct, running_order) |>
  group_by(event) |>
  arrange(desc(total_points_pct), .by_group = TRUE) |>
  mutate(group_row_num = row_number(event)) |>
  mutate(top3 = case_when(group_row_num <= 3 ~ "First Three",
                          group_row_num > 3 ~ "Other")) |>
  group_by(event, top3, year) |>
  summarize(top3_final = as.numeric(paste(mean(running_order)))) |>
  arrange(year)
```

```{r}
#| label: q2-second-plot

ggplot(euro_places, aes(x = year, y = top3_final, color = top3)) +
  geom_line(width = 0.5) +
  geom_point(size = 1) +
  labs(
    title = "Performance order in Eurovision over time",
    x = "Year",
    y = "Average order of performance",
    color = "Final Place"
  ) +
  scale_color_manual(values = c("#097969", "#FA5F55")) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  theme(
    legend.position = c(.11, .87),
    legend.background = element_rect(
      fill = "white",
      color = "black",
      linewidth = 0.4
    )
  ) +
  guides(color = guide_legend(override.aes = list(fill = NA)))
```

### Discussion

From our second graph, we see consistent results with the first one. For first, second, and third place finishers, we see an almost identical trend-line: a slight positive relationship between year and running order, suggesting that the top three finishers in Eurovision generally performed slightly later in the order than their predecessors from the previous years. Also, there is not a significant difference between the running order of first, second, and third place finishers. However, overall, the lines are so volatile that it suggests that running order is not a very strong factor in performance.

Combining the results from the graph, we conclude that performing later in the running order is correlated slightly with better performance, which could be explained by the fact that people may remember the songs performed towards the end more as they are the most recent in their memory when they vote. The trend that this has more of an impact in recent years could be explained by the fact that Eurovision has expanded over the years, meaning more performers, which would make it harder to remember the earlier performers during voting. Finally, the fact that the running orders of the top three finishers are not too different from each other despite the above results could be explained by the fact that running order matters more for distinguishing the above average from the rest but less for the best of the best.

## References

https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-17/readme.md

https://www.markhneedham.com/blog/2015/06/27/r-dplyr-squashing-multiple-rows-per-group-into-one/
