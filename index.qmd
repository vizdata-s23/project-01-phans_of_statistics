---
title: "Visualizing Factors Leading to Success in Eurovision Competitions"
subtitle: "STA/ISS 313 - Project 1"
author: "PHANs of Statistics"
format: html
editor: visual
execute: 
  echo: false
  warning: false
  message: false
---

```{r}
#| label: setup
#| include: false

library(dplyr)
library(ggplot2)
library(tidyverse)
library(ggridges)
eurovision <- read_csv("data/eurovision.csv")
```

```{r}
#| label: master data frame
#| include: false

eurovision_filt <- eurovision |>
  filter(year != "2020") |>
  mutate(
    era = case_when(
      year %in% 1956:1979 ~ "1956-1979",
      year %in% 1980:1999 ~ "1980-1999",
      year %in% 2000:2010 ~ "2000-2010",
      year %in% 2011:2022 ~ "2011-2022"
    ) 
  ) |>
  mutate(
    era_binary = case_when(
      year %in% 1956:2000 ~ "Pre-2000",
      year %in% 2001:2022 ~ "Post-2000"
    )
  ) |>
  mutate(
    from_host_country = case_when(
      host_country == artist_country ~ "Yes",
      host_country != artist_country ~ "No"
    )
  ) |>
  mutate(
    decade = case_when(
      year %in% 1950:1959 ~ "1950s",
      year %in% 1960:1969 ~ "1960s",
      year %in% 1970:1979 ~ "1970s",
      year %in% 1980:1989 ~ "1980s",
      year %in% 1990:1999 ~ "1990s",
      year %in% 2000:2009 ~ "2000s",
      year %in% 2010:2022 ~ "2010s-present"
    )
  ) |>
  group_by(year) |>
  mutate(num_ranks = max(rank)) |>
  ungroup() |>
  mutate(rank_pct = (1 - (rank / num_ranks))*100) |>
  group_by(year) |>
  mutate(num_participants = n()) |>
  ungroup() |>
  group_by(year) |>
  mutate(unweighted_prop_total_points = (total_points / sum(total_points))) |>
  ungroup() |>
  mutate(total_points_prop = (num_participants / 60) * unweighted_prop_total_points) |>
  group_by(year) |>
  mutate(
    running_order_group = case_when(
      running_order / max(running_order) > 2 / 3 ~ "End",
      running_order / max(running_order) > 1 / 3 ~ "Middle",
      running_order / max(running_order) > 0 ~ "Beginning"
    )
  ) |>
  mutate(running_order_group = factor(running_order_group,
                                      levels = c("Beginning", "Middle", "End")))
```

## Abstract

(1 paragraph): Project abstract.

------------------------------------------------------------------------

## Introduction

Eurovision is an international public song performance competition between European countries every year. Each country submits a song that is to be performed live to a centralized committee that plays the song over a common broadcast, and each country then votes on the other countries' songs. The competition began in 1956, and has occurred every year with the exception of 2020 due to the COVID pandemic. As of 2022, at least 52 countries have participated at least once, with Ireland being the recipient of the most winners . The competition has cemented itself as a periodic staple for each country to present a culturally significant piece on an international stage, and its influence has spread outside of Europe in recent years.

The dataset, contained within eurovision.csv, consists of every song performed in Eurovision history, from 1956 to 2022. This data was collected from the [Eurovision Song Contest website](https://eurovision.tv/), and was found as a [TidyTuesday dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-17/readme.md) on GitHub. The dataset consists of `r nrow(eurovision)` observations and `r ncol(eurovision)` variables, with each observation being a different song entered for the competition. The main variables used in this visual analysis are `year` (year of competition), `host_country` (where the competition was held), `artist_country` (the country the artist represented), `running_order` (the order in which the song was performed), `total_points` (total points earned in the competition), `rank` (rank of the song in the competition), and `winner` (a binary variable indicating whether the song won or did not win the competition).

## Question 1: Home Country Advantage

### Introduction

Our first question asks if contestants from the `host_country` in each competition tend to perform better than foreign contestants. We are interested in this question because hosting a competition at home is often seen as advantageous, especially in sports such as basketball and soccer where having a supportive crowd boosts team energy (and on the flip side unnerves opponents) and playing in a familiar environment helps players feel comfortable (plus not having to travel). Consequently, we want to see if there was a similar pattern for singing competitions like Eurovision, and if there is, to what extent it correlates with performance. The parts of the dataset necessary to answer this question are `host_country`, `artist_country`, `total_points`, `rank`, and `year`. We will manipulate some of these variables prior to plotting to best suit our goals; this methodology will described below.

### Approach

We first create a new binary variable called `from_host_country` for each observation indicating whether the contestant is competing in their home country (done by matching the `host_country` and `artist_country` variables and returning "Yes" if a match, and "No" if not). Our initial plan was to use `total_points` and final `rank` as a proxy for contestant performance; however, we quickly realized that these metrics lacked standardization due to A) [scoring rule changes over time](https://www.aussievision.net/post/a-history-of-eurovision-rule-changes), and B) a much larger contestant pool now compared to Eurovision's early years, as more countries joining the competition increases the number of available points and rankings. While it is unfeasible to quantifiably account for the former, we account for the latter by converting `rank` to a percentile within every year's competition, and `total_points` to a proportion of all available points in a given year's competition. This ensures that the increase in contestants over time will not skew our results. These new variables are called `total_points_prop` and `rank_pct`.

Our first plot...

Our second plot dives deeper into the subset of host country participants, first filtering for `from_host_country` only. We would like to measure how host country participants' final ranks have changed over time (ie. whether home country advantage is more prevalent now than in Eurovision's early years). We created numerous grouping variables of `year`, such as `decade` (which was highly imbalanced due to far more participating countries in recent years) and `era` (which was more balanced as we somewhat arbitrarily chose each time range). Ultimately, we elected to create and use a `binary_era` variable that indicated whether a given observation/contestant participated pre-2000 (includes 2000) or post-2000. The resulting ridge plot visualizes the distribution of rank percentiles among host country participants only, stratified by pre and post-2000 competitions. We chose to use this type of plot because its stacked/overlapped layout, along with the smoothened bins, allows for straightforward comparison of the pre and post-2000 distributions.

### Analysis

```{r}
#| label: q1-data-wrangling
#| include: false

eurovision |>
  count(year) |>
  ggplot(aes(x = year, y = n)) +
  geom_bar(stat = "identity") +
  labs(x = "Year",
       y = "Number of participating countries",
       title = "More countries have joined Eurovision over time") +
  theme_minimal()

eurovision_filt |>
  group_by(era_binary) |>
  summarise(count = n())

eurovision_filt |>
  count(from_host_country, rank, sort = TRUE)

eurovision_filt |>
  filter(from_host_country == "Yes") |>
  filter(winner == "TRUE")
```

```{r}
#| label: q1-first-plot

ggplot(eurovision_filt, aes(x = total_points_prop, fill = from_host_country)) +
  geom_density(alpha = 0.5, linewidth = 1.2) +
  labs(title = "Distribution of percentage of total points for host competitors",
       x = "Percentage of total points", y = "Density") +
  scale_fill_manual(values = c("#f47b6e", "#6baed6"), name = "From Host Country?") +
  theme_minimal()
```

```{r}
#| label: q1-second-plot

eurovision_filt |>
  filter(from_host_country == "Yes") |>
  ggplot(aes(x = rank_pct, y = era_binary)) +
  geom_density_ridges() +
  labs(x = "Rank percentile",
       y = "Era",
       title = "Distribution of home country participants' rank percentile",
       subtitle = "By era: pre-2000 vs. post-2000") +
  theme_minimal()
```

### Discussion

(1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the plots. Speculate about why the data looks the way it does.

We observe a unimodal distribution of pre-2000 host country participants' rank percentiles, while a more bimodal distribution of that of post-2000 host country participants. While the rightmost peak of the post-2000 distribution is fairly aligned with the peak of the pre-2000 distribution - right around the 75th percentile - the leftmost peak occurs near the 10th percentile. Thus, the pre-2000 distribution has a much stronger left skew, leading us to conclude that home country advantage was more prevalent in 20th century Eurovisions than 21st century Eurovisions. One potential reason for this falloff could be the wave of digitization and media. More accessible forms of watching the competition, such as television, streaming, and online replays, might disincentive in-person attendance, even for fans residing in the host country.

## Question 2: Performance Order and Success

### Introduction

Our second question asks whether the order in which contestants perform affect their success. We are interested in this question because we wanted to see if voters were biased towards certain performances based on their performance order, as well as the legitimacy of mental factors like seeing other contestants go first vs. getting one's performance over with early on. In these types of competitions, there is always fear of lack of voter consistency due to recency bias or boredom as performances continue throughout the competition. By observing if there are significant trends in how voters vote by performance order, we can gain a better understanding of these biases and how they affect the success of contestants. The relevant parts of the dataset are `total_points`, `running_order`, and `year`, some of which will again be manipulated with methods and reasons described below.

### Approach

The first plot we use to answer this question is a group of violin comparing the adjusted percentages of points earned described in the first question (`total_points_prop`) by the appearance time of the song in the competition, defined as being in the first third ("beginning") , second third ("middle"), or last third ("end") of the performance by running order (`running_order_group`). These violin plots are then faceted by the `era_binary` variable (pre-2000 or post-2000), in which the competition occurred (as previously mentioned, we manually chose these eras to best balance out the number of observations in each era). A violin plot was chosen because this made it easier to observe the entire distribution of total points proportions for each of the groups, especially seeing peaks in the distributions. Furthermore, the skew of the distributions can be analyzed easily with violin plots, which can highlight which groups have more extreme outliers. Finally, the violin plots are faceted by era because we wanted to observe temporal trends in total points percentage for the three appearance groups.

The second plot is a line graph with `year` on the x-axis and the average order of performance on the y-axis, colored by whether the participants placed in the top three or not (`top3`). A line graph was chosen because it is easy to see the trends of performance order temporally, and overlaying the lines allows for easy comparison. In order to prevent overcluttering and allow for easier analysis, we decided to plot the average order of performance rather than a scatter plot. For the same reason, we simplified the groupings to top three and not top three as there was not a significant difference in performance order across the top three, but the difference became more evidence as we included more places.

### Analysis

```{r}
#| label: q2-first-plot

ggplot(
  eurovision_filt,
  aes(x = running_order_group, y = total_points_prop,
      color = running_order_group)
) +
  geom_violin() +
  facet_wrap(~ era_binary, nrow = 1) +
  labs(
    color = "Appearance time",
    y = "Percentage of total points",
    x = NULL,
    title = "Percentage of total points earned by contestants by appearance time",
    subtitle = "By era"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        strip.background = element_rect(fill = "grey"))

```

```{r}
#| label: q2-data-wrangling
#| include: false

euro_places <- eurovision_filt |>
  drop_na(total_points_prop, running_order) |>
  group_by(event) |>
  arrange(desc(total_points_prop), .by_group = TRUE) |>
  mutate(group_row_num = row_number(event)) |>
  mutate(top3 = case_when(group_row_num <= 3 ~ "First Three",
                          group_row_num > 3 ~ "Other")) |>
  group_by(event, top3, year) |>
  summarize(top3_final = as.numeric(paste(mean(running_order)))) |>
  arrange(year)
```

```{r}
#| label: q2-second-plot

ggplot(euro_places, aes(x = year, y = top3_final, color = top3)) +
  geom_line() +
  geom_point(size = 1) +
  labs(
    title = "Performance order in Eurovision over time",
    x = "Year",
    y = "Average order of performance",
    color = "Final Place"
  ) +
  scale_color_manual(values = c("#097969", "#FA5F55")) +
  geom_smooth(method = "lm", se = FALSE) +
  theme_minimal() +
  theme(
    legend.position = c(.11, .87),
    legend.background = element_rect(
      fill = "white",
      color = "black",
      linewidth = 0.4
    )
  ) +
  guides(color = guide_legend(override.aes = list(fill = NA)))
```

### Discussion

From our first graph,

From our second graph, we see consistent results with the first one. For first, second, and third place finishers, we see an almost identical trend-line: a slight positive relationship between year and running order, suggesting that the top three finishers in Eurovision generally performed slightly later in the order than their predecessors from the previous years. Also, there is not a significant difference between the running order of first, second, and third place finishers. However, overall, the lines are so volatile that it suggests that running order is not a very strong factor in performance.

Combining the results from the graph, we conclude that performing later in the running order is correlated slightly with better performance, which could be explained by the fact that people may remember the songs performed towards the end more as they are the most recent in their memory when they vote. The trend that this has more of an impact in recent years could be explained by the fact that Eurovision has expanded over the years, meaning more performers, which would make it harder to remember the earlier performers during voting. Finally, the fact that the running orders of the top three finishers are not too different from each other despite the above results could be explained by the fact that running order matters more for distinguishing the above average from the rest but less for the best of the best.

## References

https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-05-17/readme.md

https://www.markhneedham.com/blog/2015/06/27/r-dplyr-squashing-multiple-rows-per-group-into-one/
